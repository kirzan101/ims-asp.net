@page "/fetchdata"

<PageTitle>Weather forecast</PageTitle>

@using IMS.Shared.Helpers;
@using IMS.Shared.Models;
@using IMS.Shared.ViewModels.Pagination;
@using IMS.Shared.ViewModels.Requests;
@using IMS.WebApp.Data
@inject WeatherForecastService ForecastService

@using IMS.Shared.Data.Interface
@using IMS.Shared.Data.Repository
@inject IEmployeeService EmployeeService
@using IMS.WebApp.Helpers
@inject EmployeeHelper employeeHelper
@inject NavigationManager NavigationManager

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

<hr />

@*@if (movies == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <ul>
        @foreach (Movie movie in movies)
        {
            <li>@movie.Name</li>
        }
    </ul>
}*@

<hr />

@if(employees != null)
{
    @if (employees.pagedList == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <ul>
            @foreach (EmployeePagedDTO employee in employees.pagedList){
                <li>@(employee.LastName + "," + employee.FirstName)</li>
            }
        </ul>
    }
}

<hr />

<EditForm Model="@Employee" OnValidSubmit="@SubmitEmployee">
    <div class="form-group">
        <label>First Name</label>
        <InputText class="form-control" @bind-Value="Employee.FirstName" />
    </div>
    <div class="form-group">
        <label>Middle Name</label>
        <InputText class="form-control" @bind-Value="Employee.MiddleName" />
    </div>
    <div class="form-group">
        <label>Last Name</label>
        <InputText class="form-control" @bind-Value="Employee.LastName" />
    </div>
    <div class="form-group">
        <label>Mobile Number</label>
        <InputText class="form-control" @bind-Value="Employee.MobileNumber" />
    </div>
    <div class="form-group">
        <label>Designation</label>
        <InputText class="form-control" @bind-Value="Employee.Designation" />
    </div>
    <div class="form-group">
        <label>Branch</label>
        <InputText class="form-control" @bind-Value="Employee.Branch" />
    </div>

    <br />

    <button type="submit" class="btn btn-primary">Create</button>
</EditForm>


@code {
    private WeatherForecast[]? forecasts;
    //private List<Movie>? movies;
    PagedResultDTO<EmployeePagedDTO>? employees;
    PagedQueryDTO dto = new PagedQueryDTO();
    public EmployeeDTO Employee { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Employee = new EmployeeDTO();
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
        //movies = await EmployeeService.GetMovieAsync();
        employees = await employeeHelper.GetEmployeeList(dto);
    }

    private async void SubmitEmployee()
    {
        Employee.UserId = 1;

        bool result = await employeeHelper.Create(Employee);

        if(result)
        {
            NavigationManager.NavigateTo("/");
        } else
        {
            NavigationManager.NavigateTo("/counter");
        }
    }
}
